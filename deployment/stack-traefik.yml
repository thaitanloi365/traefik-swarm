version: '3.8'

services:
  traefik:
    image: traefik:v2.4
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - 80:80
      # Listen on port 443, default for HTTPS
      - 443:443
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.role == manager
      update_config:
        # https://docs.docker.com/compose/compose-file/#update_config
        order: start-first
      restart_policy:
        condition: on-failure
        max_attempts: 3
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik network (declared below)
        - traefik.docker.network=${PUBLIC_NETWORK?PUBLIC_NETWORK is required}
        # Use the custom label "traefik.constraint-label=traefik"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik

        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-http.rule=Host(`traefik${SUB_DOMAIN_SUFFIX}.${DOMAIN?DOMAIN is required}`)
        - traefik.http.routers.traefik-http.entrypoints=http

        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-http.service=api@internal

        - traefik.http.routers.traefik-http.middlewares=https-redirect@file

        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-https.rule=Host(`traefik${SUB_DOMAIN_SUFFIX}.${DOMAIN?DOMAIN is required}`)
        - traefik.http.routers.traefik-https.entrypoints=https
        - traefik.http.routers.traefik-https.tls=true

        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-https.service=api@internal

        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.traefik-https.tls.certresolver=le

        # Enable HTTP Basic auth, using the middleware created above
        - traefik.http.routers.traefik-https.middlewares=basic-auth@file
        - traefik.http.routers.traefik-https.middlewares=rate-limit@file
        - traefik.http.routers.traefik-https.middlewares=retry@file

        # # Define the port inside of the Docker service to use
        - traefik.http.services.traefik.loadbalancer.server.port=99999
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-certificates:/certificates
      - ./config/acme.json:/letsencrypt/acme.json:rw
      - ./config/dynamic_config:/dynamic_config:rw
      - ./config/usersFile:/usersFile:rw
      - ./config/static_config/traefik.yaml:/traefik.yaml

    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - ${PUBLIC_NETWORK?PUBLIC_NETWORK is required}

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true

volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  traefik-certificates:
